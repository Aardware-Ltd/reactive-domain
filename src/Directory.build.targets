<Project InitialTargets="Initialize">
    <!-- <Import Condition="$(IsRestoreTargetsFileLoaded)" Project="$(MSBuildToolsPath)"/> -->
    <Target Name="Initialize" Condition="$(IsCIBuild) == false And $(IsPackable) == 'True'">
        <PropertyGroup>
            <BuildTime>$([System.DateTime]::UtcNow.ToString(yyyyMMddhhmm))</BuildTime>
            <CheckForNugetUpdate>$([System.TimeSpan]::FromDays(1))</CheckForNugetUpdate>
            <PackageVersionSuffix>$(PackageVersionSuffix).$(BuildTime)</PackageVersionSuffix>
            <PackageVersion>$(PackageVersionPrefix)$(PackageVersionSuffix)</PackageVersion>
            <GeneratePackageOnBuild>$(IsPackable)</GeneratePackageOnBuild>
        </PropertyGroup>
        <CombinePath BasePath="$(HomeDirectory)" Paths="localPackages">
            <Output PropertyName="LocalPublishDirectory" TaskParameter="CombinedPaths" />
        </CombinePath>
        <Message Importance="high" Text="tfs : $(TargetFrameworks)" />
        <Message Importance="high" Text="tf : $(TargetFramework)" />
    </Target>
    <Target Name="Foo">
        <Message Importance="High" Text="$(TargetFrameworkMoniker)" />
    </Target>
    <Target Name="BeforeBuild" DependsOnTargets="Restore"></Target>
    <Target Name="DeployPackage" DependsOnTargets="EnsureLocalPackagesFolder;EnsureNuget" Condition="!$(IsCIBuild) And $(IsPackable) == 'True' And $(OS) == 'WINDOWS_NT'" AfterTargets="Pack">
        <CombinePath BasePath="$(PackageOutputPath)" Paths="$(PackageId).$(PackageVersion).nupkg">
            <Output PropertyName="PackagePath" TaskParameter="CombinedPaths"></Output>
        </CombinePath>
        <Message Importance="high" Text="Deploying Package Path $(PackagePath)"/>
        <Exec Command="$(NugetExePath) add &quot;$(PackagePath)&quot; -Source &quot;$(LocalPublishDirectory)&quot;" />
    </Target>
    <Target Name="CleanOldPackages" DependsOnTargets="EnsureLocalPackagesFolder" AfterTargets="DeployPackage" Condition="$(IsPackable) == 'True'">
        <Message Importance="high" Text="Local publish directory $(LocalPublishDirectory)"/>
        <CombinePath BasePath="$(LocalPublishDirectory)" Paths="$(PackageId)">
            <Output PropertyName="PackageDirectory" TaskParameter="CombinedPaths"></Output>
        </CombinePath>
        <Message Importance="High" Text="Cleaning old packages in $(PackageDirectory)" />
        <ItemGroup>
            <DeployedPackages Include="$(PackageDirectory)\**\*.nuspec"/>
            <BuiltPackages Include="$(PackageOutputPath)$(PackageId)*.nupkg"/>
        </ItemGroup>
        <AllButNewestItems Items="@(DeployedPackages)" NumberOfItemsToKeep="3" Condition="Exists($(PackageDirectory))">
            <Output ItemName="DeployedPackagesToDelete" TaskParameter="Result"></Output>
        </AllButNewestItems>
        <RemoveDuplicates Inputs="@(DeployedPackagesToDelete->'%(RelativeDir)')">
            <Output ItemName="DirectoriesToDelete" TaskParameter="Filtered" />
        </RemoveDuplicates>
        <AllButNewestItems Items="@(BuiltPackages)" NumberOfItemsToKeep="3" Condition="Exists($(PackageOutputPath))">
            <Output ItemName="PackagesToDelete" TaskParameter="Result"></Output>
        </AllButNewestItems>
        <RemoveDir Directories="@(DirectoriesToDelete)"/>
        <Delete Files="@(PackagesToDelete)"/>
    </Target>
    <Target Name="EnsureLocalPackagesFolder" Condition="$(OS) == 'WINDOWS_NT' And $(APPVEYOR) == '' And !Exists($(LocalPublishDirectory))">
        <Message Importance="High" Text="Local publish directory not found, creating and adding nuget source" />
        <MakeDir Directories="$(LocalPublishDirectory)"></MakeDir>
    </Target>
    <!--Gets the path to nuget, downloads it if it doesn't exist runs nuget update -self once a maximum of once a day-->
    <Target Name="EnsureNuget" Condition="$(OS) == 'WINDOWS_NT'">
        <CombinePath BasePath="$(MSBuildThisFileDirectory)" Paths=".nuget">
            <Output PropertyName="NugetPath" TaskParameter="CombinedPaths"></Output>
        </CombinePath>
        <CombinePath BasePath="$(NugetPath)" Paths="nuget.exe">
            <Output PropertyName="NugetExePath" TaskParameter="CombinedPaths"></Output>
        </CombinePath>
        <CombinePath BasePath="$(NugetPath)" Paths="nuget.exe.lastupdated">
            <Output PropertyName="NugetLastUpdatedPath" TaskParameter="CombinedPaths"></Output>
        </CombinePath>
        <MakeDir Condition="!Exists($(NugetPath))" Directories="$(NugetPath)"></MakeDir>
        <Message Condition="!Exists($(NugetExePath))" Text="Downloading Nuget" Importance="High"></Message>
        <Touch Condition="!Exists($(NugetExePath))" Files="$(NugetLastUpdatedPath)" ForceTouch="true" AlwaysCreate="true"/>
        <DownloadFile Condition="!Exists($(NugetExePath))" Address="$(NugetDownloadLocation)" FileName="$(NugetExePath)" />
        <CheckLastModified FileName="$(NugetLastUpdatedPath)" Age="$(CheckForNugetUpdate)">
            <Output PropertyName="RunNugetUpdate" TaskParameter="IsOlder"/>
        </CheckLastModified>
        <Touch Condition="$(RunNugetUpdate)" Files="$(NugetLastUpdatedPath)" ForceTouch="true" AlwaysCreate="true"/>
        <Exec Condition="$(RunNugetUpdate)" Command="$(NugetExePath) update -self" />
    </Target>
    <UsingTask TaskName="CheckLastModified" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <FileName ParameterType="System.String" Required="true"/>
            <Age ParameterType="System.String" Required="true"/>
            <IsOlder ParameterType="System.Boolean" Output="true"/>
        </ParameterGroup>
        <Task>
            <Reference Include="System"/>
            <Using Namespace="System.IO"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var ts = TimeSpan.Parse(Age);
                IsOlder = File.Exists(FileName) && File.GetLastAccessTimeUtc(FileName).Add(ts) < DateTimeOffset.UtcNow;
        ]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Address ParameterType="System.String" Required="true"/>
            <FileName ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
            new System.Net.WebClient().DownloadFile(Address, FileName);
        ]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask TaskName="AllButNewestItems" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <NumberOfItemsToKeep ParameterType="System.Byte" Required="true"/>
            <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Linq"/>
            <Using Namespace="System.Linq"/>
            <Using Namespace="System.IO"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
            Log.LogMessage("Items.Length > NumberOfItemsToKeep = {0}, Items.Length {1}, NumberOfItemsToKeep {2}", Items.Length > NumberOfItemsToKeep, Items.Length,NumberOfItemsToKeep);
            if (Items.Length > NumberOfItemsToKeep)  
            {  
              Result = Items.Select(x=>new {Ct = DateTime.Parse(x.GetMetadata("ModifiedTime")), Ti = x}).OrderByDescending(x=>x.Ct) .Skip(NumberOfItemsToKeep).Select(x=>x.Ti).ToArray();
            }  
        ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>